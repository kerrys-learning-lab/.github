on:
  workflow_call:
    secrets:
      actor_name:
        description: |
          Name of the entity performing the action.
          Repository modifications (created tags, CHANGELOG.md, etc) will be
          attributed to this entity.
        required: true
      actor_token:
        description: |
          GITHUB_TOKEN or PAT authorized to make changes to the repository
        required: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.actor_name }}
          password: ${{ secrets.actor_token }}

      - name: Sanitize IMAGE_NAME
        id: sanitize
        run: echo "image_name=${IMAGE_NAME/\/\./\/}" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ steps.sanitize.outputs.image_name }}
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}
            type=sha,prefix=${{ github.ref_name }}--{{ date 'YYYY-MM-DD' }}--
            type=raw,value=latest,enable=${{ startsWith( github.ref, 'refs/tags/v') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ startsWith( github.ref, 'refs/tags/v') || contains(github.event.head_commit.message, '[test ci]') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Print outputs - 1
        run: echo '${{ toJSON(steps.meta.outputs) }}'

      - name: Print outputs - 2
        run: echo '${{ toJSON(steps.meta.outputs.json) }}'

      - name: Print outputs - 3
        run: echo '${{ toJSON(steps.meta.outputs.json.tags) }}'

      - name: Print outputs - 4
        run: echo '${{ toJSON(steps.meta.outputs.json.tags[0]) }}'

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ steps.meta.outputs.json.tags[0] }}"
          format: "template"
          template: "@/contrib/sarif.tpl"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: ${{ startsWith( github.ref, 'refs/tags/v') || contains(github.event.head_commit.message, '[test ci]') }}
        with:
          sarif_file: "trivy-results.sarif"
          token: ${{ secrets.actor_token }}
